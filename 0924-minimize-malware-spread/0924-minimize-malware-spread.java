class Solution {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;
        int[] parent = new int[n];
        for (int i = 0; i < n; i++) {
            parent[i] = i;
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (graph[i][j] == 1) {
                    union(parent, i, j);
                }
            }
        }
        int[] count = new int[n];
        for (int node : initial) {
            count[find(parent, node)]++;
        }
        Arrays.sort(initial);
        int ans = initial[0], maxCount = 0;
        for (int node : initial) {
            int p = find(parent, node);
            if (count[p] == 1) {
                int c = countComponent(graph, parent, node);
                if (c > maxCount) {
                    maxCount = c;
                    ans = node;
                } else if (c == maxCount && node < ans) {
                    ans = node;
                }
            }
        }
        return ans;
    }
    static void union(int[] parent, int u, int v) {
        parent[find(parent, u)] = find(parent, v);
    }
    static int find(int[] parent, int u) {
        if (parent[u] != u) {
            parent[u] = find(parent, parent[u]);
        }
        return parent[u];
    }
    static int countComponent(int[][] graph, int[] parent, int node) {
        boolean[] visited = new boolean[graph.length];
        visited[node] = true;
        Queue<Integer> queue = new LinkedList<>();
        queue.offer(node);
        while (!queue.isEmpty()) {
            int u = queue.poll();
            for (int v = 0; v < graph.length; v++) {
                if (graph[u][v] == 1 && !visited[v] && find(parent, u) == find(parent, v)) {
                    visited[v] = true;
                    queue.offer(v);
                }
            }
        }
        int count = 0;
        for (boolean b : visited) {
            if (b) {
                count++;
            }
        }
        return count;
    }
}